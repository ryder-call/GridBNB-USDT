name: Docker Publish to GHCR

# 触发条件：当有代码推送到 main 分支时触发
on:
  push:
    branches: [ main ]
  # 你也可以添加其他触发器，比如发布 release 时
  # release:
  #   types: [ published ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest # 使用最新的 Ubuntu 运行器
    # 需要权限来读取仓库内容和写入 Packages
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository # 步骤1：签出代码
        uses: actions/checkout@v3

      # 添加检查步骤，列出当前目录文件
      - name: List workspace files
        run: |
          ls -la
          echo "确认 main.py 是否存在:"
          test -f main.py && echo "main.py exists" || echo "main.py DOES NOT exist"

      - name: Log in to the Container registry # 步骤2：登录 GHCR
        # 使用 docker/login-action 来登录
        uses: docker/login-action@v2
        with:
          registry: ghcr.io # 指定 GHCR 地址
          # 使用 github.actor 作为用户名 (即触发 workflow 的用户)
          # 使用 GITHUB_TOKEN 作为密码，这是由 GitHub Actions 自动提供的
          # GITHUB_TOKEN 的权限由上面 'permissions' 部分定义
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker # 步骤3：提取元数据 (可选但推荐)
        # 使用 docker/metadata-action 自动生成镜像标签
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository }} # 镜像名称格式: ghcr.io/owner/repo
          # 可以生成多种标签，例如：
          # - latest (如果推送到默认分支)
          # - Git 标签 (如果触发是 tag)
          # - Git SHA
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha

      - name: Build and push Docker image # 步骤4：构建并推送镜像
        # 使用 docker/build-push-action
        uses: docker/build-push-action@v4
        with:
          context: . # Dockerfile 的上下文路径 (当前目录)
          push: true # 确认执行推送
          tags: ${{ steps.meta.outputs.tags }} # 使用上一步生成的标签
          labels: ${{ steps.meta.outputs.labels }} # 使用上一步生成的标签
          
      # 构建后检查镜像内容
      - name: Verify image contents
        run: |
          # 拉取刚刚构建的镜像
          docker pull $(echo "${{ steps.meta.outputs.tags }}" | head -n 1)
          # 使用镜像运行一个临时容器并列出 /app 目录内容
          docker run --rm $(echo "${{ steps.meta.outputs.tags }}" | head -n 1) ls -la /app
